TextBlock(text='Node Name and Description:\nThe node is named "Adalo" and is designed to consume the Adalo API. Adalo is a platform that allows users to build and deploy custom applications without writing code. The node\'s purpose is to interact with Adalo collections (similar to databases) and perform various operations on them.\n\nInput Parameters:\nThe node accepts the following input parameters:\n1. Resource: Currently, the only option is "Collection".\n2. Operation: The operation to be performed on the Adalo collection. Options include Create, Delete, Get, Get Many, and Update.\n3. Collection ID: The unique identifier of the Adalo collection to be accessed.\n4. Additional fields based on the selected operation, such as data to send for Create and Update operations, row ID for Delete and Get operations, and pagination options for Get Many operation.\n\nOutput Structure:\nThe output structure varies depending on the selected operation:\n1. Create and Update: The created or updated row data.\n2. Delete: A simple success indicator (`{ "success": true }`).\n3. Get: The retrieved row data.\n4. Get Many: An array of retrieved rows under the "records" property.\n\nSupported Operations and Required Parameters:\n1. Create:\n   - Required Parameters: Collection ID, data to send (either automatically mapped from input or manually defined).\n   - Creates a new row in the specified Adalo collection.\n2. Delete:\n   - Required Parameters: Collection ID, Row ID.\n   - Deletes the specified row from the Adalo collection.\n3. Get:\n   - Required Parameters: Collection ID, Row ID.\n   - Retrieves the specified row from the Adalo collection.\n4. Get Many:\n   - Required Parameters: Collection ID.\n   - Optional Parameter: Limit (for pagination).\n   - Retrieves multiple rows from the Adalo collection. Pagination is supported.\n5. Update:\n   - Required Parameters: Collection ID, Row ID, data to send (either automatically mapped from input or manually defined).\n   - Updates the specified row in the Adalo collection with the provided data.\n\nAuthentication Methods:\nThe node requires an Adalo API credential to authenticate with the Adalo API. The credential must be configured with the appropriate App ID.\n\nError Handling Mechanisms:\nThe node does not appear to have explicit error handling mechanisms described in the provided code. However, the system likely handles errors through its built-in error handling mechanisms, such as returning appropriate error messages and status codes in case of failures.\n\nOther Important Details:\n1. The node uses the Adalo API\'s pagination mechanism, supporting offset-based pagination with a configurable page size (default: 100).\n2. The node provides the option to automatically map input data to the request body for Create and Update operations, or to manually define the fields and their values.\n3. The node\'s subtitle dynamically displays the selected operation and collection ID for easy identification.\n4. The node is categorized under the "transform" group, indicating its primary purpose is data transformation or manipulation.\n\nOverall, the Adalo node provides a convenient way to interact with Adalo collections through various CRUD (Create, Read, Update, Delete) operations, enabling the system to integrate with and automate workflows involving Adalo applications.', type='text')