TextBlock(text="Node Name and Description:\nAffinityTrigger - Handles Affinity events via webhooks.\n\nInput Parameters:\nThis node does not have any input parameters as it is a Trigger node designed to receive webhook events from the Affinity API.\n\nProperties:\n- Events (required): A multi-select option to choose the events for which the webhook should be subscribed. The available options include various events related to field values, fields, files, list entries, lists, notes, opportunities, organizations, and persons.\n\nOutput Structure:\nThe node returns an array of JSON objects representing the triggered event data. The structure of the output depends on the type of event received.\n\nSupported Operations:\n\n1. Webhook Handling:\n   - The node listens for incoming webhook events from the Affinity API based on the selected events.\n   - When an event is received, the node retrieves the corresponding resource data from the Affinity API and returns it as the output.\n\n2. Webhook Registration and Management:\n   - The node checks if a webhook with the same configuration (events and URL) already exists before creating a new one.\n   - If a matching webhook exists, it updates the static workflow data with the webhook ID.\n   - If no matching webhook exists, it creates a new webhook subscription by sending a POST request to the Affinity API with the webhook URL and selected events.\n   - Upon successful creation, the webhook ID is stored in the static workflow data.\n   - During the deletion process, the node sends a DELETE request to the Affinity API using the stored webhook ID to unsubscribe from the events.\n\nAuthentication Methods:\nThe node requires an Affinity API credential to authenticate requests to the Affinity API.\n\nError Handling Mechanisms:\n- If the node's name contains spaces, it throws a NodeOperationError, as spaces are not allowed in the webhook URL.\n- If the webhook creation or deletion process fails, the node returns false, indicating an unsuccessful operation.\n- Error handling for API requests is not explicitly shown in the provided code, but it is likely handled by the affinityApiRequest function.\n\nOther Important Details:\n- The node uses helper functions like affinityApiRequest, eventsExist, and mapResource from the GenericFunctions module for API requests, event checking, and resource mapping, respectively.\n- The node maps the received event type to the corresponding resource and fetches the resource data from the Affinity API before returning it as the output.\n- The node supports various event types related to different Affinity resources, such as field values, fields, files, list entries, lists, notes, opportunities, organizations, and persons.\n\nThe node is a Trigger node in the system, designed to receive webhook events from the Affinity API and handle the corresponding data retrieval and output generation based on the received event type.", type='text')