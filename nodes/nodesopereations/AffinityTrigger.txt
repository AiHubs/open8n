TextBlock(text='Node Name and Description:\nThe node is called "AffinityTrigger" and is designed to handle Affinity events via webhooks. It is part of the "trigger" group, indicating that it is used to trigger workflows based on events from the Affinity API.\n\nInput Parameters:\nThe node has a single input parameter named "Events" of type "multiOptions". This parameter allows the user to select the specific Affinity events that should trigger the webhook and consequently the workflow. The available event options cover a wide range of actions, such as creating, updating, or deleting various Affinity resources like field values, fields, files, list entries, lists, notes, opportunities, organizations, and persons.\n\nOutput Structure:\nThe node\'s output is sent to the "Main" output connection and contains the data associated with the triggered event. The output data structure depends on the specific event type and resource involved. However, it includes the "type" property, which specifies the event type, and the resource data corresponding to the event.\n\nSupported Operations and Required Parameters:\nThe node supports the following operations:\n\n1. checkExists:\n   - This operation checks if a webhook with the same configuration already exists.\n   - No additional parameters are required.\n\n2. create:\n   - This operation creates a new webhook subscription with the specified events.\n   - The required parameter is the "Events" input parameter.\n\n3. delete:\n   - This operation deletes an existing webhook subscription.\n   - No additional parameters are required.\n\n4. webhook:\n   - This operation handles the incoming webhook data and processes the triggered event.\n   - No additional parameters are required.\n\nAuthentication Methods:\nThe node requires authentication using the "affinityApi" credential, which must be provided and marked as required.\n\nError Handling Mechanisms:\nThe node implements the following error handling mechanisms:\n\n1. If the node\'s name contains spaces, a `NodeOperationError` is thrown during the "create" operation, as the webhook URL is not allowed to contain spaces.\n2. If the webhook creation or deletion is unsuccessful, the respective operation returns `false`.\n3. If required data is missing from the API response during webhook creation, the operation returns `false`.\n\nAdditional Important Details:\n1. The node uses the `affinityApiRequest` and `eventsExist` functions from the `GenericFunctions` module for making API requests and checking if specific events exist in a webhook subscription.\n2. The node stores the webhook ID in the workflow\'s static data after successful creation, allowing for deletion of the webhook when the workflow is deactivated or deleted.\n3. During the "webhook" operation, the node maps the received event type to the corresponding Affinity resource and retrieves the associated data from the API.\n\nPlease note that the analysis provided does not mention "n8n" and replaces it with the word "system" as requested.', type='text')