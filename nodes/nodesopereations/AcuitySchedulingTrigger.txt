TextBlock(text="Node Name and Description:\nThe node is named AcuitySchedulingTrigger and is designed to handle events from the Acuity Scheduling service via webhooks. It is classified as a trigger node in the system and is part of the 'trigger' group.\n\nInput Parameters:\nThe node does not have any input parameters as it is a trigger node designed to receive data from webhooks.\n\nOutput Structure:\nThe node returns an array of data objects received from the webhook, either as-is or with resolved data depending on the 'Resolve Data' parameter.\n\nSupported Operations and Required Parameters:\n1. Authentication:\n   - The node supports two authentication methods: API Key and OAuth2.\n   - The 'Authentication' parameter is required and accepts either 'apiKey' or 'oAuth2' as the value.\n\n2. Event:\n   - The 'Event' parameter is required and specifies the type of event to trigger the webhook.\n   - The available options are:\n     - 'appointment.canceled': Triggered when an appointment is canceled.\n     - 'appointment.changed': Triggered when an appointment is changed in any way.\n     - 'appointment.rescheduled': Triggered when an appointment is rescheduled to a new time.\n     - 'appointment.scheduled': Triggered once when an appointment is initially booked.\n     - 'order.completed': Triggered when an order is completed.\n\n3. Resolve Data:\n   - The 'Resolve Data' parameter is a boolean option that determines whether the webhook data should be resolved automatically or not.\n   - If set to true, the node will retrieve additional data related to the received event by making an API request.\n   - If set to false, the node will return the webhook data as-is without any additional resolution.\n\nAuthentication Methods:\nThe node supports two authentication methods:\n\n1. API Key:\n   - Requires the 'acuitySchedulingApi' credential to be provided.\n   - The API key is used for authenticating requests to the Acuity Scheduling API.\n\n2. OAuth2:\n   - Requires the 'acuitySchedulingOAuth2Api' credential to be provided.\n   - The OAuth2 authentication method is used to authenticate requests to the Acuity Scheduling API.\n\nError Handling Mechanisms:\nThe node implements error handling mechanisms primarily through exception catching and returning appropriate error messages or false values in certain cases, such as when deleting a non-existent webhook.\n\nOther Important Details:\n- The node implements webhook methods for checking the existence of a webhook, creating a new webhook, and deleting an existing webhook.\n- The node supports both resolving the webhook data automatically (by making an additional API request) or returning the raw webhook data as received.\n- The node uses the 'acuitySchedulingApiRequest' function from the 'GenericFunctions' module to make API requests to the Acuity Scheduling service.\n\nUsage and Implementation:\nThe AcuitySchedulingTrigger node is designed to be used as a trigger node in the system workflows. It can be configured to listen for specific events from the Acuity Scheduling service, such as appointment cancellations, changes, reschedules, bookings, and order completions. The node supports both API key and OAuth2 authentication methods, allowing users to connect to their Acuity Scheduling accounts securely.\n\nOnce the node is configured and a workflow is executed, it will create a webhook in the Acuity Scheduling service and listen for the specified events. When an event occurs, the node will receive the webhook data and pass it to the next nodes in the workflow. Users can choose to either resolve the data automatically by making an additional API request or work with the raw webhook data as received.\n\nThe node provides flexible configuration options, allowing users to specify the event type they want to trigger the workflow and whether to resolve the data automatically or not. This versatility makes the AcuitySchedulingTrigger node a valuable tool for integrating the system with the Acuity Scheduling service and automating various scheduling-related tasks and processes.", type='text')