name: '[+] Publish & sync Plus'

on:
  release:
    types: [published]

jobs:
  publish-to-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: read
    env:
      NPM_CONFIG_PROVENANCE: true
    outputs:
      release: ${{ steps.set-release.outputs.release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4.2.0
        with:
          node-version: 20.x

      - name: Setup corepack and pnpm
        run: |
          npm i -g corepack@0.31
          corepack enable

      - name: Update package.json Name and Description
        run: |
          node -e "const fs = require('fs'); \
            const file = 'packages/cli/package.json'; \
            const pkg = JSON.parse(fs.readFileSync(file, 'utf8')); \
            pkg.name = '@n8n-plus/n8n-plus'; \
            pkg.description = 'n8n Workflow Automation Tool (plus edition)'; \
            fs.writeFileSync(file, JSON.stringify(pkg, null, 2));"

      - run: pnpm install --frozen-lockfile

      - name: Set release version in env
        run: echo "RELEASE=$(node -e 'console.log(require("./package.json").version)')" >> $GITHUB_ENV

      - name: Build
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/cache/save@v4.2.0
        with:
          path: ./packages/**/dist
          key: ${{ github.sha }}-release:build

      - name: Dry-run publishing
        run: pnpm publish --filter n8n-plus --no-git-checks --dry-run

      - name: Pre publishing changes
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          node .github/scripts/trim-fe-packageJson.js
          node .github/scripts/ensure-provenance-fields.mjs
          cp README.md packages/cli/README.md
          sed -i "s/default: 'dev'/default: 'stable'/g" packages/cli/dist/config/schema.js

      - name: Publish to NPM
        run: pnpm publish --filter n8n-plus --publish-branch ${{ github.event.release.target_commitish }} --access public --tag rc --tag stable --no-git-checks

      - name: Cleanup rc tag
        run: npm dist-tag rm n8n rc
        continue-on-error: true

      - id: set-release
        run: echo "release=${{ env.RELEASE }}" >> $GITHUB_OUTPUT

  publish-to-docker-hub:
    name: Publish to DockerHub
    needs: [publish-to-npm]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.3.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v6.11.0
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          context: ./docker/images/n8n
          build-args: |
            N8N_VERSION=${{ needs.publish-to-npm.outputs.release }}
          platforms: linux/amd64,linux/arm64
          provenance: false
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/n8n-plus:${{ needs.publish-to-npm.outputs.release }}
            ${{ secrets.DOCKER_USERNAME }}/n8n-plus:latest
            ghcr.io/${{ github.repository_owner }}/n8n-plus:${{ needs.publish-to-npm.outputs.release }}
            ghcr.io/${{ github.repository_owner }}/n8n-plus:latest

  update-release:
    name: Update Release (set prerelease to false)
    needs: [publish-to-docker-hub]
    runs-on: ubuntu-latest
    # Only run if the release was marked as prerelease.
    if: ${{ github.event.release.prerelease == true }}
    steps:
      - name: 'Set release as final (prerelease: false)'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              prerelease: false
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-plus:
    name: 'Sync Plus'
    needs: [update-release]
    runs-on: ubuntu-latest
    steps:
      - name: Extract normalized branch tag from released target branch
        id: extract
        shell: bash
        run: |
          # The release's target_commitish is expected to be in the format "release/<normalized_tag>"
          RELEASE_BRANCH="${{ github.event.release.target_commitish }}"
          echo "Released branch: ${RELEASE_BRANCH}"
          if [[ "$RELEASE_BRANCH" =~ ^release/(.+)$ ]]; then
            BRANCH_TAG="${BASH_REMATCH[1]}"
            echo "branch_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          else
            echo "::error ::Release target_commitish is not in the 'release/<tag>' format. Exiting."
            exit 1
          fi

      - name: Check if a PR from release/<tag> to plus already exists
        id: check_existing_pr
        uses: actions/github-script@v6
        with:
          script: |
            const base = 'plus';  // target branch for our custom changes
            const head = `release/${{ steps.extract.outputs.branch_tag }}`;
            const { owner, repo } = context.repo;
            const { data: pulls } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              base,
              head: `${owner}:${head}`,
            });
            if (pulls.length > 0) {
              core.setOutput("pr_exists", "true");
            } else {
              core.setOutput("pr_exists", "false");
            }

      - name: Exit if PR is already open
        if: ${{ steps.check_existing_pr.outputs.pr_exists == 'true' }}
        run: |
          echo "A PR merging release/${{ steps.extract.outputs.branch_tag }} into plus already exists. Exiting."
          exit 0

      - name: Create PR merging release/<tag> into plus using GitHub API
        uses: actions/github-script@v6
        if: ${{ steps.check_existing_pr.outputs.pr_exists == 'false' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            try {
              const result = await github.rest.pulls.create({
                owner,
                repo,
                title: `Merge release ${{ steps.extract.outputs.branch_tag }} into plus`,
                head: `release/${{ steps.extract.outputs.branch_tag }}`,
                base: 'plus',
              });
              console.log(`Pull request created: ${result.data.html_url}`);
            } catch (error) {
              console.error('Failed to create pull request:', error);
              core.setFailed(`Failed to create pull request: ${error.message}`);
            }
