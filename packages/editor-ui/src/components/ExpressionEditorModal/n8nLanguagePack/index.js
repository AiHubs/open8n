import { completeFromList } from '@codemirror/autocomplete';
import { LRParser } from '@lezer/lr';
import { foldNodeProp, foldInside, LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQQOPOOOOOO'#Cb'#CbOOOO'#C`'#C`QQOPOOOOOO-E6^-E6^",
  stateData: "Y~OQPORPO~O",
  goto: "bVPPPPWP^QRORSRTQOR",
  nodeNames: "âš  Program PlainText Resolvable",
  maxTerm: 6,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "%g~RRO#o[#o#p{#p~[~aRQ~O#o[#o#pj#p~[~mRO#o[#p~[~~v~{OQ~~!OSO#o[#o#p![#p~[~~v~!_}X^![pq![qr![rs![st![tu![uv![vw![wx![xy![yz![z{![{|![|}![}!O![!O!P![!P!Q![!Q![![![!]![!]!^![!^!_![!_!`![!`!a![!a!b![!b!c![!c!}![!}#O![#O#P![#P#Q![#Q#R![#R#S![#S#T![#T#o![#o#p![#p#q![#q#r%[#r#s![#y#z![$f$g![#BY#BZ![$IS$I_![$I|$JO![$JT$JU![$KV$KW![&FU&FV![~%_P#q#r%b~%gOR~",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const parserWithMetaData = parser.configure({
    props: [
        foldNodeProp.add({
            Application: foldInside,
        }),
        styleTags({
            OpenMarker: tags.brace,
            CloseMarker: tags.brace,
            PlainText: tags.content,
            Resolvable: tags.string,
        }),
    ],
});
const n8nExpressionLanguage = LRLanguage.define({
    parser: parserWithMetaData,
    languageData: {
        commentTokens: { line: ";" },
    },
});
const completions = n8nExpressionLanguage.data.of({
    autocomplete: completeFromList([
        { label: "abcdef", type: "keyword" },
        { label: "defun", type: "keyword" },
        { label: "defvar", type: "keyword" },
        { label: "let", type: "keyword" },
        { label: "cons", type: "function" },
        { label: "car", type: "function" },
        { label: "cdr", type: "function" },
    ]),
});
function n8nExpression() {
    return new LanguageSupport(n8nExpressionLanguage, [completions]);
}

export { n8nExpression, n8nExpressionLanguage, parserWithMetaData };
