'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var autocomplete = require('@codemirror/autocomplete');
var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "nQQOPOOOOOO'#Cb'#CbOOOO'#C`'#C`QQOPOOOOOO-E6^-E6^",
  stateData: "Y~OQPORPO~O",
  goto: "bVPPPPWP^QRORSRTQOR",
  nodeNames: "âš  Program PlainText Resolvable",
  maxTerm: 6,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: ",V~RTO#ob#o#ps#p%'hb%'h%'i!X%'i~b~gSQ~O#ob#o#ps#p%'hb%'i~b~vSO#ob#p%'hb%'i~b~~!S~!XOQ~~![P%'h%'i!_~!bP%'h%'i!e~!hP#o#p!k~!nP#o#p!q~!t}X^!qpq!qqr!qrs!qst!qtu!quv!qvw!qwx!qxy!qyz!qz{!q{|!q|}!q}!O!q!O!P!q!P!Q!q!Q![!q![!]!q!]!^!q!^!_!q!_!`!q!`!a!q!a!b!q!b!c!q!c!}!q!}#O!q#O#P!q#P#Q!q#Q#R!q#R#S!q#S#T!q#T#o!q#o#p!q#p#q!q#q#r%q#r#s!q#y#z!q$f$g!q#BY#BZ!q$IS$I_!q$I|$JO!q$JT$JU!q$KV$KW!q&FU&FV!q~%t}X^!qpq!qqr!qrs!qst!qtu!quv!qvw!qwx!qxy!qyz!qz{!q{|!q|}!q}!O!q!O!P!q!P!Q!q!Q![!q![!]!q!]!^!q!^!_!q!_!`!q!`!a!q!a!b!q!b!c!q!c!}!q!}#O!q#O#P!q#P#Q!q#Q#R!q#R#S!q#S#T!q#T#o!q#o#p!q#p#q!q#q#r(q#r#s!q#y#z!q$f$g!q#BY#BZ!q$IS$I_!q$I|$JO!q$JT$JU!q$KV$KW!q&FU&FV!q~(t!OX^!qpq!qqr!qrs!qst!qtu!quv!qvw!qwx!qxy!qyz!qz{!q{|!q|}!q}!O!q!O!P!q!P!Q!q!Q![!q![!]!q!]!^!q!^!_!q!_!`!q!`!a!q!a!b!q!b!c!q!c!}!q!}#O!q#O#P!q#P#Q!q#Q#R!q#R#S!q#S#T!q#T#o!q#o#p!q#p#q!q#q#r(q#r#s!q#y#z!q$f$g!q#BY#BZ!q$IS$I_!q$I|$JO!q$JT$JU!q$KV$KW!q%'h%'i+t&FU&FV!q~+wP%'h%'i+z~+}P%'h%'i,Q~,VOR~",
  tokenizers: [0],
  topRules: {"Program":[0,1]},
  tokenPrec: 0
});

const n8nExpressionLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.foldNodeProp.add({
                Application: language.foldInside,
            }),
            highlight.styleTags({
                OpenMarker: highlight.tags.brace,
                CloseMarker: highlight.tags.brace,
                PlainText: highlight.tags.content,
                Resolvable: highlight.tags.special(highlight.tags.string),
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: ";" },
    },
});
n8nExpressionLanguage.data.of({
    autocomplete: autocomplete.completeFromList([
        { label: "defun", type: "keyword" },
        { label: "defvar", type: "keyword" },
        { label: "let", type: "keyword" },
        { label: "cons", type: "function" },
        { label: "car", type: "function" },
        { label: "cdr", type: "function" },
    ]),
});
function n8nExpression() {
    return new language.LanguageSupport(n8nExpressionLanguage);
}

exports.n8nExpression = n8nExpression;
exports.n8nExpressionLanguage = n8nExpressionLanguage;
