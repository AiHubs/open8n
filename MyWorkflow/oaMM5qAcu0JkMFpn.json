{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Set Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Params": {
      "main": [
        [
          {
            "node": "Perplexity Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Request": {
      "main": [
        [
          {
            "node": "Clean Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Output": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Store in Vector DB",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Store in Vector DB": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Code Keywords": {
      "main": [
        [
          {
            "node": "Extract Code Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Extract individual book price",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to CSV File": {
      "main": [
        [
          {
            "node": "Send CSV via e-mail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract all books from the page": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort by price": {
      "main": [
        [
          {
            "node": "Convert to CSV File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save to Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract individual book price": {
      "main": [
        [
          {
            "node": "Sort by price",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch website content": {
      "main": [
        [
          {
            "node": "Extract all books from the page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On new manual Chat Message": {
      "main": [
        [
          {
            "node": "ReAct AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Is error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exctract HTML Body": {
      "main": [
        [
          {
            "node": "Remove extra tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is error?": {
      "main": [
        [
          {
            "node": "Stringify error message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Exctract HTML Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove extra tags": {
      "main": [
        [
          {
            "node": "Simplify?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simplify output": {
      "main": [
        [
          {
            "node": "Convert to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simplify?": {
      "main": [
        [
          {
            "node": "Simplify output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QUERY_PARAMS": {
      "main": [
        [
          {
            "node": "CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CONFIG": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Markdown": {
      "main": [
        [
          {
            "node": "Send Page Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP_Request_Tool": {
      "ai_tool": [
        [
          {
            "node": "ReAct AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "ReAct AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "ReAct AI Agent": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Google Sheets": {
      "main": [
        [
          {
            "node": "Store in Vector DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send CSV via e-mail": {
      "main": [
        [
          {
            "node": "Store in Vector DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Backup to Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "ReAct AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return": {
      "main": [
        [
          {
            "node": "Set Code Keywords",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-05T03:11:31.666Z",
  "id": "oaMM5qAcu0JkMFpn",
  "meta": null,
  "name": "我的代碼知識庫",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 12
            }
          ]
        }
      },
      "id": "eb6ced9e-71f8-40f1-b372-fb817678eec6",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -2940,
        -700
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "codeKeywords",
              "type": "string",
              "value": "={{ $json.inputKeywords || 'smart contract, flashloan, arbitrage, optimization' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fa424303-6b9d-490d-9775-576a9a4403aa",
      "name": "Set Code Keywords",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -420,
        520
      ],
      "alwaysOutputData": true,
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "1e71a693-c22c-47dd-870d-223421ea70b4",
      "name": "Extract Code Content",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        40,
        520
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "mode": "id",
          "value": ""
        },
        "options": {}
      },
      "id": "54072a1f-0f44-4f9a-9d6f-f96a123482a3",
      "name": "Store in Vector DB",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1880,
        -540
      ],
      "alwaysOutputData": true,
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "oaUWzRdVNhnOmUS3",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1tmrzjRNSeza00JfeDv4fbiLWWQi2XJdVPQZPKP0EQQw",
          "mode": "list",
          "cachedResultName": "FAQ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tmrzjRNSeza00JfeDv4fbiLWWQi2XJdVPQZPKP0EQQw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Trang tính1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1tmrzjRNSeza00JfeDv4fbiLWWQi2XJdVPQZPKP0EQQw/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "QUESTION",
              "displayName": "QUESTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ANSWERS",
              "displayName": "ANSWERS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "7b3c0ccb-aae3-4328-a034-aaac73e0c7a8",
      "name": "Backup to Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -980,
        -780
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZJ11dqBezQirp1MK",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "YOUR_CHAT_ID",
        "text": "=代碼知識庫更新完成！\n\n關鍵字: {{ $json.codeKeywords }}\n新增內容數: {{ $json.addedCount }}筆\n向量數據庫狀態: {{ $json.dbStatus }}",
        "additionalFields": {}
      },
      "id": "9d63f0da-5a6a-409f-bda7-b5d6e027ea6a",
      "name": "Send Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2500,
        -360
      ],
      "webhookId": "40f7f983-1164-47ef-a888-c820c2d17d07"
    },
    {
      "parameters": {
        "agent": "sqlAgent",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1620,
        -880
      ],
      "id": "4f0fd2df-904e-4e5d-b60b-7ba8236b1bb9",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "id": "12c86a43-f2ed-4253-b513-d424d8ed7ff4",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -2980,
        -480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b5c6ca0-5ca8-4f67-abc1-44341cf419bc",
              "name": "system_prompt",
              "type": "string",
              "value": "You are an n8n fanboy."
            },
            {
              "id": "7c36c362-6269-4564-b6fe-f82126bc8f5e",
              "name": "user_prompt",
              "type": "string",
              "value": "What are the differences between n8n and Make?"
            },
            {
              "id": "4366d2b5-ad22-445a-8589-fddab1caa1ab",
              "name": "domains",
              "type": "string",
              "value": "n8n.io, make.com"
            }
          ]
        },
        "options": {}
      },
      "id": "698dba2c-5c68-4542-acd0-09db10cee9b3",
      "name": "Set Params",
      "type": "n8n-nodes-base.set",
      "position": [
        -2680,
        -480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5859093c-6b22-41db-ac6c-9a9f6f18b7e3",
              "name": "output",
              "type": "string",
              "value": "={{ $json.choices[0].message.content }}"
            },
            {
              "id": "13208fff-5153-45a7-a1cb-fe49e32d9a03",
              "name": "citations",
              "type": "array",
              "value": "={{ $json.citations }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e033b7ee-6504-461b-9f63-2d416371f843",
      "name": "Clean Output",
      "type": "n8n-nodes-base.set",
      "position": [
        -1980,
        -660
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"sonar\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"{{ $json.system_prompt }}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"{{ $json.user_prompt }}\"\n    }\n  ],\n  \"temperature\": 0.2,\n  \"top_p\": 0.9,\n  \"search_domain_filter\": {{ (JSON.stringify($json.domains.split(','))) }},\n  \"return_images\": false,\n  \"return_related_questions\": false,\n  \"search_recency_filter\": \"month\",\n  \"top_k\": 0,\n  \"stream\": false,\n  \"presence_penalty\": 0,\n  \"frequency_penalty\": 1,\n  \"response_format\": null\n}",
        "options": {}
      },
      "id": "7a0c6842-b2e4-46a9-901e-0f91819e2f1c",
      "name": "Perplexity Request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2320,
        -500
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "v0jzUOezU1ZDfsyE",
          "name": "Header Auth account 4"
        }
      }
    },
    {
      "parameters": {
        "content": "## Credentials Setup\n\n1/ Go to the perplexity dashboard, purchase some credits and create an API Key\n\nhttps://www.perplexity.ai/settings/api\n\n2/ In the perplexity Request node, use Generic Credentials, Header Auth. \n\nFor the name, use the value \"Authorization\"\nAnd for the value \"Bearer pplx-e4...59ea\" (Your Perplexity Api Key)\n\n",
        "height": 840,
        "width": 3160
      },
      "id": "2ef0d8e8-a273-4b06-8d51-fac994c383eb",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2860,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1540,
        -520
      ],
      "id": "432a45c5-46a0-4317-a38a-aab81835bef8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "BAreECE9F2JxOvTm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1860,
        -200
      ],
      "id": "84a6a07a-0ffc-46c7-a856-7fb44ff29580",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "BAreECE9F2JxOvTm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "books",
        "options": {}
      },
      "id": "ebc186b8-06fb-46c5-a318-7f2267636790",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -160,
        -300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "dab4c2bf-548c-49e7-a91a-a2cfff82de47",
      "name": "Convert to CSV File",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        1000,
        -660
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "books",
              "cssSelector": ".row > li",
              "returnValue": "html",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "id": "754bcd93-f5b3-4844-8293-2f06dd168d47",
      "name": "Extract all books from the page",
      "type": "n8n-nodes-base.html",
      "position": [
        -440,
        -300
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "price",
              "order": "descending"
            }
          ]
        },
        "options": {}
      },
      "id": "ebc70cbe-2d71-42cb-b63e-4aabcd8bdf0e",
      "name": "Sort by price",
      "type": "n8n-nodes-base.sort",
      "position": [
        420,
        -440
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "notesInFlow": true
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "books",
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "h3 > a",
              "returnValue": "attribute",
              "attribute": "title"
            },
            {
              "key": "price",
              "cssSelector": ".price_color"
            }
          ]
        },
        "options": {}
      },
      "id": "94563283-ef1d-4057-8c83-037522217140",
      "name": "Extract individual book price",
      "type": "n8n-nodes-base.html",
      "position": [
        40,
        -320
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": "1zyiRT7iIlfzZiskC9vDVoAFnW_UNMVXX0-ESVU1yYxY",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zyiRT7iIlfzZiskC9vDVoAFnW_UNMVXX0-ESVU1yYxY/edit?usp=drivesdk",
          "cachedResultName": "Scraped Data"
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": "gid=0",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zyiRT7iIlfzZiskC9vDVoAFnW_UNMVXX0-ESVU1yYxY/edit#gid=0",
          "cachedResultName": "Sheet1"
        },
        "columns": {
          "value": {},
          "schema": [
            {
              "id": "title",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "title",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "price",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "price",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "autoMapInputData",
          "matchingColumns": []
        },
        "options": {}
      },
      "id": "ded74f12-2bd1-4f11-ad9a-0b4d344d10f7",
      "name": "Save to Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        1140,
        -140
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "sendTo": "constact@mihai.ltd",
        "subject": "bookstore csv",
        "message": "Hey, here's the scraped data from the online bookstore!",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {}
            ]
          }
        }
      },
      "id": "b7047faa-40bb-4323-a2ee-da62ea45e687",
      "name": "Send CSV via e-mail",
      "type": "n8n-nodes-base.gmail",
      "position": [
        1480,
        -700
      ],
      "typeVersion": 2.1,
      "webhookId": "d0bf5d36-409e-4b31-918a-385f330cde0b",
      "credentials": {
        "gmailOAuth2": {
          "id": "5p8FU2WpD1sAaapt",
          "name": "Gmail account 3"
        }
      }
    },
    {
      "parameters": {
        "url": "http://books.toscrape.com",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "12d80895-4074-4890-911e-b7e6dfdb5a96",
      "name": "Fetch website content",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -740,
        -320
      ],
      "typeVersion": 4.1
    },
    {
      "parameters": {
        "content": "### You need to setup Microsoft Azure credentials with Microsoft Graph permissions.",
        "height": 184.90255200662574
      },
      "id": "25c68249-75b2-4c61-948f-0a40e6e52e03",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1260,
        -360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "1236892d-4b78-480b-80f4-32b58074912b",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -2440,
        680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "66a1c791-ac62-48ba-b30e-52f541d267a5",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -1620,
        -120
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "notesInFlow": true,
      "credentials": {
        "n8nApi": {
          "id": "Tp6xOZ8C9VuUYvKS",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "b4b2aa50-81d4-40ee-98e3-c43e8f9ae4b7",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        -740,
        540
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "a4b76a61-053c-43ef-a8ec-843a4a87ff22",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1740,
        460
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "ab5a5206-d6dc-47e7-9ca1-cb5ee873be46",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        -2020,
        440
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "555d32fb-cc30-4e95-a91a-0c46ac5bb8b6",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        -2060,
        660
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "97507de2-24bb-4fa8-b344-35f9df20ecd4",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        -1780,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "ea7cb2a9-767e-4f1d-a511-903397c3137d",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        -1460,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "da350a41-05f8-4a33-b504-8bb814d8453e",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -1240,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6bfded67-735f-45cb-9d2a-2eae0fe756f8",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -1240,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "ebbe3ea1-aee4-472c-aa79-72567e653f3a",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -1240,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "8fdbbf8b-9bc4-4bdd-96e2-bbc9076eb5a4",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        -1020,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "95b36f67-9a90-40b9-9a70-cb2746124f79",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        -1020,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f5f4b862-69b1-4153-82d0-d080339651f3",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -1420,
        20
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "71c623f5-dfef-407e-b7e2-95dc2341506f",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        -1660,
        660
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "254a5c3f-cf66-4995-8d3e-a7fc118bb16b",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1960,
        -160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "d76ac825-e528-4d12-aa26-ed6a69f6de8c",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        -1800,
        0
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "alwaysOutputData": true,
      "notesInFlow": true,
      "credentials": {
        "slackOAuth2Api": {
          "id": "Pj0vbJLUQfYrNxzK",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "78569df6-7e1c-498d-960f-df46666387f5",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        -1200,
        40
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "324c96e4-1806-4627-95ec-74dea207acd8",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        -1200,
        -140
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "Pj0vbJLUQfYrNxzK",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=:x: Failed to backup {{ $('Loop Over Items').item.json.id }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "119b6112-ac7d-430e-9de8-f631efb60100",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        -1000,
        60
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "",
          "value": "={{ $('Config').first().item.repo_name }}"
        },
        "filePath": "={{ $('Config').first().item.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "6481e1b1-ca45-45b9-8daa-184d278a824f",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        -2220,
        440
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "={{ $vars.repo_owner }}"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "={{ $vars.repo_name }}"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "={{ $vars.repo_path }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "6eb90d54-03dc-4863-99ed-a6f666506ac5",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        -2260,
        680
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "4573f933-a1a3-4aeb-bd93-e6911ffeb4fc",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -1980,
        60
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "id": "ff37f399-6d8a-4086-be74-b69ffc43e6ee",
      "name": "On new manual Chat Message",
      "type": "@n8n/n8n-nodes-langchain.manualChatTrigger",
      "position": [
        -3060,
        -960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ encodeURI($json.query.url) }}",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "b4ffd2cd-97f5-4ecf-a7d8-a61fc83d4d38",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        980,
        720
      ],
      "typeVersion": 4.1,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "HTML",
              "stringValue": "={{ $json?.data.match(/<body[^>]*>([\\s\\S]*?)<\\/body>/i)[1] }}"
            }
          ]
        },
        "include": "selected",
        "includeFields": "HTML",
        "options": {}
      },
      "id": "c93bbcc3-1165-440d-8ccb-1521a7757d1b",
      "name": "Exctract HTML Body",
      "type": "n8n-nodes-base.set",
      "position": [
        1540,
        740
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasOwnProperty('error') }}",
              "value2": true
            }
          ]
        }
      },
      "id": "c92011a3-839f-4164-b479-15ed968cf706",
      "name": "Is error?",
      "type": "n8n-nodes-base.if",
      "position": [
        1260,
        780
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "page_content",
              "stringValue": "={{ $('QUERY_PARAMS').first()?.json?.query?.url == null ? \"INVALID action_input. This should be an HTTP query string like this: \\\"?url=VALIDURL&method=SELECTEDMETHOD\\\". Only a simple string value is accepted. JSON object as an action_input is NOT supported!\" : JSON.stringify($json.error) }}"
            }
          ]
        },
        "include": "selected",
        "includeFields": "HTML",
        "options": {}
      },
      "id": "2a9ac21a-576a-46b0-9f73-907a60a9eb74",
      "name": "Stringify error message",
      "type": "n8n-nodes-base.set",
      "position": [
        1640,
        460
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "HTML",
              "stringValue": "={{ ($json.HTML || \"HTML BODY CONTENT FOR THIS SEARCH RESULT IS NOT AVAILABLE\").replace(/<script[^>]*>([\\s\\S]*?)<\\/script>|<style[^>]*>([\\s\\S]*?)<\\/style>|<noscript[^>]*>([\\s\\S]*?)<\\/noscript>|<!--[\\s\\S]*?-->|<iframe[^>]*>([\\s\\S]*?)<\\/iframe>|<object[^>]*>([\\s\\S]*?)<\\/object>|<embed[^>]*>([\\s\\S]*?)<\\/embed>|<video[^>]*>([\\s\\S]*?)<\\/video>|<audio[^>]*>([\\s\\S]*?)<\\/audio>|<svg[^>]*>([\\s\\S]*?)<\\/svg>/ig, '')}}"
            }
          ]
        },
        "options": {}
      },
      "id": "61990148-1b3e-4dad-9b9d-0bcaad63fec4",
      "name": "Remove extra tags",
      "type": "n8n-nodes-base.set",
      "position": [
        1740,
        740
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "HTML",
              "stringValue": "={{ $json.HTML.replace(/href\\s*=\\s*\"(.+?)\"/gi, 'href=\"NOURL\"').replace(/src\\s*=\\s*\"(.+?)\"/gi, 'src=\"NOIMG\"')}}"
            }
          ]
        },
        "options": {}
      },
      "id": "04a42524-99fd-47d9-b813-a4784acea77f",
      "name": "Simplify output",
      "type": "n8n-nodes-base.set",
      "position": [
        2120,
        640
      ],
      "notesInFlow": true,
      "typeVersion": 3.2,
      "notes": "remove links and image URLs"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $('CONFIG').first()?.json?.query?.method }}",
              "operation": "contains",
              "value2": "simplif"
            }
          ]
        }
      },
      "id": "3b23f0ca-df9e-4ff2-ac8c-e8f49c3943f2",
      "name": "Simplify?",
      "type": "n8n-nodes-base.if",
      "position": [
        1940,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "query",
              "type": "objectValue",
              "objectValue": "={{ $json.query.substring($json.query.indexOf('?') + 1).split('&').reduce((result, item) => (result[item.split('=')[0]] = decodeURIComponent(item.split('=')[1]), result), {}) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9ad8c79a-aee7-4ccb-a723-6080c6b69048",
      "name": "QUERY_PARAMS",
      "type": "n8n-nodes-base.set",
      "position": [
        300,
        700
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "query.maxlimit",
              "type": "numberValue",
              "numberValue": "={{ $json?.query?.maxlimit == null ? 70000 : Number($json?.query?.maxlimit) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "97e7924a-1390-4232-b116-bb97adfc565c",
      "name": "CONFIG",
      "type": "n8n-nodes-base.set",
      "position": [
        660,
        680
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "agent": "reActAgent",
        "options": {
          "humanMessageTemplate": "{input}\n\n{agent_scratchpad}",
          "prefix": "Answer the following questions as best you can. You have access to the following tools:",
          "suffixChat": "Begin! Reminder to always use the exact characters `Final Answer` when responding.",
          "suffix": "Begin!\n\n\tQuestion: {input}\n\tThought:{agent_scratchpad}"
        }
      },
      "id": "74419b19-3c00-4883-93a0-0db5fc91a01c",
      "name": "ReAct AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -2400,
        -920
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "html": "={{ $json.HTML }}",
        "destinationKey": "page_content",
        "options": {}
      },
      "id": "0bb15415-6b8e-46c0-bb74-16a5bb90630e",
      "name": "Convert to Markdown",
      "type": "n8n-nodes-base.markdown",
      "position": [
        2300,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "page_content",
              "stringValue": "={{ $json.page_content.length < $('CONFIG').first()?.json?.query?.maxlimit ? $json.page_content : \"ERROR: PAGE CONTENT TOO LONG\" }}"
            },
            {
              "name": "page_length",
              "type": "numberValue",
              "numberValue": "={{ $json.page_content.length }}"
            }
          ]
        },
        "include": "selected",
        "options": {}
      },
      "id": "ecc6a5ea-77e5-4e38-a18c-420e173ca829",
      "name": "Send Page Content",
      "type": "n8n-nodes-base.set",
      "position": [
        2500,
        740
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "name": "HTTP_Request_Tool",
        "description": "Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \"?url=VALIDURL&method=SELECTEDMETHOD\". \"url\" parameter should contain the valid URL string. \"method\" key can be either \"full\" or \"simplified\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \"method\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full.",
        "workflowId": "={{ $workflow.id }}",
        "responsePropertyName": "page_content"
      },
      "id": "bef9083f-f9ef-4466-902e-aba7b2e882a3",
      "name": "HTTP_Request_Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        -2260,
        -680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "o1-mini",
        "options": {
          "frequencyPenalty": 0.3,
          "temperature": 0.7,
          "timeout": 300000
        }
      },
      "id": "49705ec2-0d94-4ba8-bd14-a762100dce95",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -2480,
        -680
      ],
      "typeVersion": 1,
      "notesInFlow": true,
      "credentials": {
        "openAiApi": {
          "id": "BAreECE9F2JxOvTm",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Post-processing of the HTML page:\n1. Keep only <BODY> content\n2. Remove inline <SCRIPT> tag entirely, as well as: NOSCRIPT, IFRAME, OBJECT, EMBED, VIDEO, AUDIO, SVG, and HTML comments.\n3. In case query parameter method=simplified, replace all page URLs (a href) and IMG (src) with NOURL / NOIMG - this may save up to 20% of the page length\n4. Convert the remaining HTML to Markdown. This step further reduces the length of the page: long HTML tags and styles are eliminated, but the markdown syntax keeps some page structure. This gives much better results compared to just a blank text.\n5. Finally, check the page length. If it's too long, send an \"ERROR: PAGE CONTENT TOO LONG\" instead of the actual page. Of course, you could split the page content in chunks, but sometimes long pages just don't have a needed content, so it makes little sense to burn tokens on them.",
        "height": 873,
        "width": 1780
      },
      "id": "5c3a5163-08c1-469a-b946-d62446897a6c",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        960,
        120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### Convert the query string into JSON, apply the limit for a page length",
        "height": 276,
        "width": 916
      },
      "id": "c92e1166-f99d-4797-bd10-2e99fc04fe82",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        240,
        600
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-02-16T14:30:21.000Z",
  "versionId": "7b1d8063-4150-463c-8a25-c08ed97bf71c"
}