{
  "active": false,
  "connections": {
    "Get all files in given path": {
      "main": [
        [
          {
            "node": "Split the result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split the result": {
      "main": [
        [
          {
            "node": "Get file content from GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file content from GitHub": {
      "main": [
        [
          {
            "node": "Convert files to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert files to JSON": {
      "main": [
        [
          {
            "node": "Check for skipped Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for skipped Credentials": {
      "main": [
        [],
        [
          {
            "node": "Restore n8n Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals1": {
      "main": [
        [
          {
            "node": "Get all files in given path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON formatting": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File1": {
      "main": [
        [
          {
            "node": "Merge Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large1": {
      "main": [
        [
          {
            "node": "Get File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items1": {
      "main": [
        [
          {
            "node": "isDiffOrNew1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew1": {
      "main": [
        [
          {
            "node": "Check Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status1": {
      "main": [
        [
          {
            "node": "Same file - Do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing1": {
      "main": [
        [
          {
            "node": "Return1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different1": {
      "main": [
        [
          {
            "node": "Edit existing file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new1": {
      "main": [
        [
          {
            "node": "Create new file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file1": {
      "main": [
        [
          {
            "node": "Return1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file1": {
      "main": [
        [
          {
            "node": "Return1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data1": {
      "main": [
        [
          {
            "node": "If file too large1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Globals2": {
      "main": [
        [
          {
            "node": "Get file data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-10T14:24:29.428Z",
  "id": "HOe1bMHArQ8nkrhH",
  "meta": null,
  "name": "GITHUB ÂÇô‰ªΩ+ÈÇÑÂéüAPIKEY",
  "nodes": [
    {
      "parameters": {
        "url": "=https://api.github.com/repos/{{ $json.repo.owner }}/{{ $json.repo.name }}/contents/{{ $json.repo.path }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "id": "b86d07da-30f1-4e54-8a93-68c7c72930cf",
      "name": "Get all files in given path",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        940,
        140
      ],
      "typeVersion": 4.2,
      "credentials": {
        "githubApi": {
          "id": "jbPopdE0FdRZPToq",
          "name": "WebsterTesting1314"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "path",
        "options": {}
      },
      "id": "52826d9d-6d44-4b24-9bf3-7dc416deadc8",
      "name": "Split the result",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        500,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "BeyondspaceStudio"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "n8n-backup"
        },
        "filePath": "={{ $('Get all files in given path').item.json.path }}",
        "additionalParameters": {}
      },
      "id": "981a324f-6fde-406c-ab2e-37f19b831fb7",
      "name": "Get file content from GitHub",
      "type": "n8n-nodes-base.github",
      "position": [
        740,
        460
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "jbPopdE0FdRZPToq",
          "name": "WebsterTesting1314"
        }
      }
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "520de2f8-07dc-4e85-8b06-3d9ef51d35d2",
      "name": "Convert files to JSON",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        960,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "credential",
        "name": "={{ $json.data.name }}",
        "credentialTypeName": "={{ $json.data.type }}",
        "data": "={{ JSON.stringify($json.data.data) }}",
        "requestOptions": {}
      },
      "id": "d45fcd5a-9217-4a6b-9814-249613bbfd21",
      "name": "Restore n8n Credentials",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1560,
        560
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "Tp6xOZ8C9VuUYvKS",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "or",
          "conditions": [
            {
              "id": "ad031296-4ac0-4087-bc35-7975a2cc25e6",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.data }}",
              "rightValue": ""
            },
            {
              "id": "ca912a57-6a4b-4b9a-be0e-37b69d3e4917",
              "operator": {
                "type": "string",
                "operation": "contains"
              },
              "leftValue": "={{ $json.data.name }}",
              "rightValue": "n8n account"
            }
          ]
        },
        "options": {}
      },
      "id": "b2df5403-172b-4ae7-aae1-b60d70e30bb5",
      "name": "Check for skipped Credentials",
      "type": "n8n-nodes-base.if",
      "position": [
        1220,
        500
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "WebsterTesting1314"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "credentials"
            }
          ]
        },
        "options": {}
      },
      "id": "1f4efec2-343e-4777-8b41-4e4031978844",
      "name": "Globals1",
      "type": "n8n-nodes-base.set",
      "position": [
        720,
        140
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## ÂæûGitHubÊÅ¢Âæ© üîÑ\n**ÈÄôÂÄãÂ∑•‰ΩúÊµÅÂ∞áÂæûGitHubÂÇô‰ªΩ‰∏≠ÊÅ¢Âæ©ÊâÄÊúâÂØ¶‰æãÊÜëË≠â„ÄÇüíæ**\n\n## Ë®≠ÁΩÆ ‚öôÔ∏è\n## ÊâìÈñãGlobalsÁØÄÈªû‰∏¶Êõ¥Êñ∞‰ª•‰∏ãÂÄº üëá\n\n**repo.owner: ‰Ω†ÁöÑGithubÁî®Êà∂Âêç**\n**repo.name: ‰Ω†ÁöÑÂÄâÂ∫´ÂêçÁ®±**\n**repo.path: ÂÄâÂ∫´ÂÖßË¶Å‰ΩøÁî®ÁöÑÊñá‰ª∂Â§æ„ÄÇ**\n**Â¶ÇÊûú‰Ω†ÁöÑÁî®Êà∂ÂêçÊòØjohn-doeÔºåÂÄâÂ∫´ÂêçÁ®±ÊòØn8n-backupsÔºå‰∏¶‰∏î‰Ω†ÊÉ≥Â∞áÊÜëË≠âÊîæÂÖ•credentialsÊñá‰ª∂Â§æÔºå‰Ω†ÊáâË©≤Ë®≠ÁΩÆÔºöüìù**\n\n**repo.owner - john-doe**\n**repo.name - n8n-backups**\n**repo.path - credentials/**",
        "height": 500,
        "width": 400
      },
      "id": "e95bebf5-1e6e-43bc-8abf-9140942e9498",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "Ë∑≥ÈÅéÊÜëË≠âËôïÁêÜ üö´\nÁ©∫ÁöÑ JSON Ê™îÊ°à\nn8n Â∏≥Êà∂ API\n‚Ä¶‚Ä¶Èö®ÊôÇÊ†πÊìöÈúÄË¶ÅÁ∑®ËºØË©≤ÁØÄÈªû üòâ",
        "color": 4
      },
      "id": "e18ec9f5-f720-4b21-8f4f-0bcd315b4a37",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1200,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"
      },
      "id": "201b84a4-5bd2-42f3-840a-6e12b2047fc6",
      "name": "JSON formatting",
      "type": "n8n-nodes-base.code",
      "position": [
        600,
        1540
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 750.8363163824032,
        "width": 2086.845881354743,
        "color": 6
      },
      "id": "54bed862-e629-48dd-a770-59bc6d21d924",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -240,
        1860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "c3ed5e8f-0d7a-4207-af09-2b08cb53bcf1",
      "name": "Return1",
      "type": "n8n-nodes-base.set",
      "position": [
        1640,
        2040
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "8fbb9874-2dc1-4dfb-a03f-2f1d1004439f",
      "name": "Get File1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        740,
        1920
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "868f910f-6a2d-457d-8acf-defc083a1bce",
      "name": "If file too large1",
      "type": "n8n-nodes-base.if",
      "position": [
        540,
        1940
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "2e4d3f60-008e-498d-b6e5-1ed4ace39377",
      "name": "Merge Items1",
      "type": "n8n-nodes-base.merge",
      "position": [
        620,
        2280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
      },
      "id": "9e0940b9-c26f-4124-9fe9-b6fec4fd2f10",
      "name": "isDiffOrNew1",
      "type": "n8n-nodes-base.code",
      "position": [
        740,
        2200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "16ea9df2-667e-4873-bfda-2f6106229816",
      "name": "Check Status1",
      "type": "n8n-nodes-base.switch",
      "position": [
        960,
        2200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "1504e429-ce33-4ce5-b02d-c8b985068222",
      "name": "Same file - Do nothing1",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1220,
        2080
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6c0f3811-f402-4543-a691-9df3f5fbb658",
      "name": "File is different1",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1180,
        2200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "35f5fca3-3355-4c0d-975c-3588e24c490f",
      "name": "File is new1",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1180,
        2380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals2').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals2').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals2').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew1').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "c3449f2a-c481-420c-a81c-bfb92923b483",
      "name": "Create new file1",
      "type": "n8n-nodes-base.github",
      "position": [
        1400,
        2380
      ],
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "GOcNcYqT1Ql4uTYC",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals2').item.json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $('Globals2').item.json.repo.name }}"
        },
        "filePath": "={{ $('Globals2').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew1').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "cb4762bb-2354-4e72-85cd-3a52b6af4c67",
      "name": "Edit existing file1",
      "type": "n8n-nodes-base.github",
      "position": [
        1440,
        2220
      ],
      "typeVersion": 1,
      "credentials": {
        "githubOAuth2Api": {
          "id": "GOcNcYqT1Ql4uTYC",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "3ec9ed07-186b-48e3-8b71-902eb9538961",
      "name": "Loop Over Items1",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        800,
        1540
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "dc712d2e-ace8-4358-ac09-04c69cb75c49",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        200,
        1640
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## ÂÇô‰ªΩËá≥ GitHub üîÑüìÇ\n\nÈÄôÂÄãÂ∑•‰ΩúÊµÅÂ∞áÂÇô‰ªΩÊâÄÊúâÂØ¶‰æãÊÜëË≠âÂà∞ GitHub„ÄÇ\n\n**Êñá‰ª∂Â∞áÊåâÁÖß `ID.json` ÁöÑÊ†ºÂºè‰øùÂ≠ò„ÄÇ**\n\n---\n\n### ÈÖçÁΩÆ ‚öôÔ∏è\n\nÊâìÈñã `Globals` ÁØÄÈªûÔºåÁÑ∂ÂæåÊ†πÊìö‰ª•‰∏ãÂèÉÊï∏Êõ¥Êñ∞Ë®≠ÁΩÆ üëáÔºö\n\n- **repo.owner:** ‰Ω†ÁöÑ GitHub Áî®Êà∂Âêç„ÄÇ  \n- **repo.name:** ‰Ω†ÁöÑÂÄâÂ∫´ÂêçÁ®±„ÄÇ  \n- **repo.path:** Âú®ÂÄâÂ∫´‰∏≠Â≠òÊîæÊÜëË≠âÁöÑÊñá‰ª∂Â§æ„ÄÇÂ¶ÇÊûúÊñá‰ª∂Â§æ‰∏çÂ≠òÂú®ÔºåÂ∞áËá™ÂãïÂâµÂª∫„ÄÇ  \n\n#### Á§∫‰æãÈÖçÁΩÆ  \nÂ¶ÇÊûú‰Ω†ÁöÑ GitHub Áî®Êà∂ÂêçÁÇ∫ `john-doe`ÔºåÂÄâÂ∫´ÂêçÁ®±ÁÇ∫ `n8n-backups`Ôºå‰Ω†Â∏åÊúõÂ∞áÊÜëË≠âÂ≠òÊîæÂà∞ `credentials` Êñá‰ª∂Â§æ‰∏≠ÔºåË´ãË®≠ÁΩÆ‰ª•‰∏ãÂèÉÊï∏Ôºö  \n\n- **repo.owner**: `john-doe`  \n- **repo.name**: `n8n-backups`  \n- **repo.path**: `credentials/`  \n\n---\n\n### Ë®≠Ë®àÈÇèËºØ üí°\n\nÊ≠§Â∑•‰ΩúÊµÅÈÄöÈÅéË™øÁî®Â≠êÂ∑•‰ΩúÊµÅ‰æÜÂü∑Ë°åÂÇô‰ªΩÊìç‰ΩúÔºå‰ª•Âπ´Âä©Èôç‰ΩéÂÖßÂ≠ò‰ΩøÁî®Èáè‰∏¶ÊèêÈ´òÊïàÁéá„ÄÇ üòä\n",
        "height": 676,
        "width": 445,
        "color": 4
      },
      "id": "86b017c4-2fa2-471b-a08b-eb45a8db7688",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -340,
        1060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 434.88564057365943,
        "width": 1028.7522287279464,
        "color": 7
      },
      "id": "52fa199f-23f2-425d-b202-dcd32aad6990",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        160,
        1360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.owner }}"
        },
        "repository": {
          "__rl": true,
          "mode": "name",
          "value": "={{ $json.repo.name }}"
        },
        "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "2e7137f3-7ca4-4534-afe3-c99b7e835a84",
      "name": "Get file data1",
      "type": "n8n-nodes-base.github",
      "position": [
        340,
        1940
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubOAuth2Api": {
          "id": "GOcNcYqT1Ql4uTYC",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
              "name": "repo.owner",
              "type": "string",
              "value": "john-doe"
            },
            {
              "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
              "name": "repo.name",
              "type": "string",
              "value": "n8n-backup"
            },
            {
              "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
              "name": "repo.path",
              "type": "string",
              "value": "credentials/"
            }
          ]
        },
        "options": {}
      },
      "id": "92c1fbdd-33e4-42e1-a374-2f522b857842",
      "name": "Globals2",
      "type": "n8n-nodes-base.set",
      "position": [
        140,
        2100
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Edit this node üëá",
        "height": 80,
        "width": 150,
        "color": 4
      },
      "id": "dc5c6893-14cd-47f4-89fe-4379c2c51412",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        2000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "897193f6-614b-402e-a83d-4c3ff41c38eb",
      "name": "Execute Workflow1",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1020,
        1540
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "8551eb5d-58fc-4cde-8caa-68f727fdd526",
      "name": "Execute Command",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        420,
        1540
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-10T14:24:56.000Z",
  "versionId": "c964d746-c3de-444f-b236-2e5c3598baed"
}